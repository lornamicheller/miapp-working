(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('moment'), require('@angular/common'), require('@angular/core'), require('@ionic/angular'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@logisticinfotech/ionic-timepicker', ['exports', 'rxjs', 'moment', '@angular/common', '@angular/core', '@ionic/angular', '@angular/forms'], factory) :
    (factory((global.logisticinfotech = global.logisticinfotech || {}, global.logisticinfotech['ionic-timepicker'] = {}),global.rxjs,global.moment_,global.ng.common,global.ng.core,global.angular,global.ng.forms));
}(this, (function (exports,rxjs,moment_,common,i0,angular,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IonicTimepickerService = /** @class */ (function () {
        function IonicTimepickerService() {
        }
        IonicTimepickerService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        IonicTimepickerService.ctorParameters = function () { return []; };
        /** @nocollapse */ IonicTimepickerService.ngInjectableDef = i0.defineInjectable({ factory: function IonicTimepickerService_Factory() { return new IonicTimepickerService(); }, token: IonicTimepickerService, providedIn: "root" });
        return IonicTimepickerService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // const memo = memo_.Resolver;
    /** @type {?} */
    var moment = moment_;
    var IonicTimepickerModalComponent = /** @class */ (function () {
        function IonicTimepickerModalComponent(navParams, modalCtrl) {
            this.navParams = navParams;
            this.modalCtrl = modalCtrl;
            this.hoursArray = [];
            this.minutesArray = [];
            this.secondsArray = [];
            this.meridianArray = [];
            this.slideOptsHours = {
                centeredSlides: true,
                slidesPerView: 5,
                initialSlide: 0,
                direction: 'vertical',
                loop: true
            };
            this.slideOptsMinutes = {
                centeredSlides: true,
                slidesPerView: 5,
                initialSlide: 0,
                direction: 'vertical',
                loop: true
            };
            this.slideOptsSeconds = {
                centeredSlides: true,
                slidesPerView: 5,
                initialSlide: 0,
                direction: 'vertical',
                loop: true
            };
            this.slideOptsMeridian = {
                centeredSlides: true,
                slidesPerView: 5,
                initialSlide: 0,
                direction: 'vertical',
                loop: false
            };
            this.sliderHoursActiveIndex = 0;
            this.sliderMinutesActiveIndex = 0;
            this.sliderSecondsActiveIndex = 0;
            this.sliderMeridianActiveIndex = 0;
            this.mainObj = {};
            this.isReady = false;
            this.inItTimePicker().subscribe();
        }
        /**
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.ionViewDidEnter = /**
         * @return {?}
         */
            function () {
                // this.inItTimePicker().subscribe();
                // this.inItTimePicker();
            };
        /**
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.inItTimePicker = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var myObservable = new rxjs.Observable(( /**
                 * @param {?} observer
                 * @return {?}
                 */function (observer) {
                    if (_this.navParams.get('selectedTime')) {
                        console.log('Selected time =>', _this.navParams.get('selectedTime'));
                        _this.selectedTime = _this.navParams.get('selectedTime');
                    }
                    _this.mainObj = _this.initTimePickerObject(_this.navParams.get('objConfig'));
                    _this.setHoursArray(_this.mainObj.timeFormat);
                    _this.setMinutesArray(_this.mainObj.timeFormat);
                    _this.setSecondsArray(_this.mainObj.timeFormat);
                    _this.setMeridianArray(_this.mainObj.timeFormat);
                    // setTimeout(() => {
                    _this.isReady = true;
                    // }, 100);
                    observer.complete();
                }));
                return myObservable;
            };
        // get slider hours active index
        // get slider hours active index
        /**
         * @param {?} event
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.onChangeHoursSlide =
            // get slider hours active index
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.sliderHoursActiveIndex = event.target.swiper.realIndex;
            };
        // get slider minutes active index
        // get slider minutes active index
        /**
         * @param {?} event
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.onChangeMinutesSlide =
            // get slider minutes active index
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.sliderMinutesActiveIndex = event.target.swiper.realIndex;
            };
        // get slider seconds active index
        // get slider seconds active index
        /**
         * @param {?} event
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.onChangeSecondsSlide =
            // get slider seconds active index
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.sliderSecondsActiveIndex = event.target.swiper.realIndex;
            };
        // get slider seconds active index
        // get slider seconds active index
        /**
         * @param {?} event
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.onChangeMeridianSlide =
            // get slider seconds active index
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.sliderMeridianActiveIndex = event.target.swiper.realIndex;
            };
        // initialize timepicker Object
        // initialize timepicker Object
        /**
         * @param {?} config
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.initTimePickerObject =
            // initialize timepicker Object
            /**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                if (config.inputTime && !this.selectedTime) {
                    this.selectedTime = config.inputTime;
                }
                /** @type {?} */
                var objConfig = {};
                objConfig.momentLocale = config.momentLocale ? config.momentLocale : 'en-US';
                moment.locale(objConfig.momentLocale);
                objConfig.timeFormat = config.timeFormat ? config.timeFormat : 'hh:mm A';
                if (typeof (this.selectedTime) === 'string') {
                    this.momentObj = this.selectedTime ?
                        moment(this.selectedTime, objConfig.timeFormat) :
                        moment(moment(new Date().getTime()));
                }
                else {
                    this.momentObj = this.selectedTime ?
                        moment(this.selectedTime) :
                        moment(moment(new Date().getTime()));
                }
                objConfig.setLabel = config.setLabel ? config.setLabel : 'Set';
                objConfig.closeLabel = config.closeLabel ? config.closeLabel : 'Close';
                objConfig.titleLabel = config.titleLabel ? config.titleLabel : 'Time';
                objConfig.btnCloseSetInReverse = config.btnCloseSetInReverse ? config.btnCloseSetInReverse : false;
                objConfig.btnProperties = {};
                if (config.btnProperties) {
                    /** @type {?} */
                    var btnProperties = config.btnProperties;
                    objConfig.btnProperties.expand = btnProperties.expand ? btnProperties.expand : 'block';
                    objConfig.btnProperties.fill = btnProperties.fill ? btnProperties.fill : 'solid';
                    objConfig.btnProperties.size = btnProperties.size ? btnProperties.size : 'default';
                    objConfig.btnProperties.color = btnProperties.color ? btnProperties.color : '';
                    objConfig.btnProperties.disabled = btnProperties.disabled ? btnProperties.disabled : false;
                    objConfig.btnProperties.strong = btnProperties.strong ? btnProperties.strong : false;
                }
                else {
                    objConfig.btnProperties.expand = 'block';
                    objConfig.btnProperties.fill = 'solid';
                    objConfig.btnProperties.size = 'default';
                    objConfig.btnProperties.disabled = false;
                    objConfig.btnProperties.strong = false;
                }
                return objConfig;
            };
        // close modal
        // close modal
        /**
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.closeIonicTimePickerModal =
            // close modal
            /**
             * @return {?}
             */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var modal;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.modalCtrl.getTop()];
                            case 1:
                                modal = _a.sent();
                                modal.dismiss('');
                                return [2 /*return*/];
                        }
                    });
                });
            };
        // set time in modal dismiss method
        // set time in modal dismiss method
        /**
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.setIonicTimePickerTime =
            // set time in modal dismiss method
            /**
             * @return {?}
             */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var modal;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.modalCtrl.getTop()];
                            case 1:
                                modal = _a.sent();
                                this.selectedTime = this.setTimeInMomentObject();
                                modal.dismiss({ time: (this.selectedTime) });
                                return [2 /*return*/];
                        }
                    });
                });
            };
        // set time in moment object
        // set time in moment object
        /**
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.setTimeInMomentObject =
            // set time in moment object
            /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var formateArray = [];
                /** @type {?} */
                var timeArray = [];
                /** @type {?} */
                var charZeroInLocale = moment().second(0).format('s');
                // console.log('charZeroInLocale : ' + charZeroInLocale);
                if (this.mainObj.timeFormat.indexOf('H') >= 0) {
                    formateArray.push('H');
                    /** @type {?} */
                    var hourString = this.hoursArray[this.sliderHoursActiveIndex];
                    // hourString = hourString.replace(/^0+/, '');
                    timeArray.push(hourString);
                }
                if (this.mainObj.timeFormat.indexOf('h') >= 0) {
                    formateArray.push('h');
                    /** @type {?} */
                    var hourString = this.hoursArray[this.sliderHoursActiveIndex];
                    // hourString = hourString.replace(/^0+/, '');
                    timeArray.push(hourString);
                }
                if (this.mainObj.timeFormat.indexOf('k') >= 0) {
                    formateArray.push('k');
                    /** @type {?} */
                    var hourString = this.hoursArray[this.sliderHoursActiveIndex];
                    // hourString = hourString.replace(/^0+/, '');
                    timeArray.push(hourString);
                }
                if (this.mainObj.timeFormat.indexOf('m') >= 0) {
                    formateArray.push('m');
                    /** @type {?} */
                    var minString = this.minutesArray[this.sliderMinutesActiveIndex];
                    // minString = minString.replace(/^0+/, '');
                    timeArray.push(minString);
                }
                if (this.mainObj.timeFormat.indexOf('s') >= 0) {
                    formateArray.push('s');
                    /** @type {?} */
                    var secString = this.secondsArray[this.sliderSecondsActiveIndex];
                    // secString = secString.replace(/^0+/, '');
                    timeArray.push(secString);
                }
                if (this.mainObj.timeFormat.indexOf('a') >= 0 || this.mainObj.timeFormat.indexOf('A') >= 0) {
                    formateArray.push('a');
                    /** @type {?} */
                    var meridianString = this.meridianArray[this.sliderMeridianActiveIndex].toLowerCase();
                    timeArray.push(meridianString);
                }
                /** @type {?} */
                var formateString = formateArray.join(':');
                /** @type {?} */
                var timeString = timeArray.join(':');
                // this.momentObj = mmObj;
                // console.log('timeString: ' + timeString + '  formateString: ' + formateString);
                /** @type {?} */
                var mmObj = moment(timeString, formateString);
                return mmObj.format(this.mainObj.timeFormat);
            };
        // sets hours array
        // sets hours array
        /**
         * @param {?} timeFormat
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.setHoursArray =
            // sets hours array
            /**
             * @param {?} timeFormat
             * @return {?}
             */
            function (timeFormat) {
                /** @type {?} */
                var obj = moment().startOf('date');
                if (timeFormat.indexOf('HH') >= 0) {
                    this.hoursArray = this.initHoursArray(obj, 23, 'HH');
                    this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('HH');
                }
                else if (timeFormat.indexOf('H') >= 0) {
                    this.hoursArray = this.initHoursArray(obj, 23, 'H');
                    this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('H');
                }
                else if (timeFormat.indexOf('hh') >= 0) {
                    this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 11, 'hh');
                    this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('hh') - 1;
                }
                else if (timeFormat.indexOf('h') >= 0) {
                    this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 11, 'h');
                    this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('h') - 1;
                }
                else if (timeFormat.indexOf('kk') >= 0) {
                    this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 23, 'kk');
                    this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('kk') - 1;
                }
                else if (timeFormat.indexOf('k') >= 0) {
                    this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 23, 'k');
                    this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('k') - 1;
                }
                // console.log('hours array =>', this.hoursArray);
            };
        // Initialize hours array
        // Initialize hours array
        /**
         * @param {?} momentObj
         * @param {?} end
         * @param {?} format
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.initHoursArray =
            // Initialize hours array
            /**
             * @param {?} momentObj
             * @param {?} end
             * @param {?} format
             * @return {?}
             */
            function (momentObj, end, format) {
                /** @type {?} */
                var hoursArray = [];
                for (var i = 0; i <= end; i++) {
                    hoursArray.push(momentObj.format(format));
                    momentObj.add(1, 'hours');
                }
                return hoursArray;
            };
        // sets minutes array
        // sets minutes array
        /**
         * @param {?} timeFormat
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.setMinutesArray =
            // sets minutes array
            /**
             * @param {?} timeFormat
             * @return {?}
             */
            function (timeFormat) {
                if (timeFormat.indexOf('mm') >= 0) {
                    this.minutesArray = this.initMinutesArray('mm');
                    this.slideOptsMinutes.initialSlide = Number(this.momentObj.format('mm'));
                }
                else if (timeFormat.indexOf('m') >= 0) {
                    this.minutesArray = this.initMinutesArray('m');
                    this.slideOptsMinutes.initialSlide = Number(this.momentObj.format('m'));
                }
                // console.log('minutes array =>', this.minutesArray);
            };
        // initialize minutes array
        // initialize minutes array
        /**
         * @param {?} format
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.initMinutesArray =
            // initialize minutes array
            /**
             * @param {?} format
             * @return {?}
             */
            function (format) {
                /** @type {?} */
                var obj = moment().startOf('hour');
                /** @type {?} */
                var minutesArray = [];
                for (var i = 0; i < 60; i++) {
                    minutesArray.push(obj.format(format));
                    obj.add(1, 'minutes');
                }
                return minutesArray;
            };
        // sets seconds array
        // sets seconds array
        /**
         * @param {?} timeFormat
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.setSecondsArray =
            // sets seconds array
            /**
             * @param {?} timeFormat
             * @return {?}
             */
            function (timeFormat) {
                if (timeFormat.indexOf('ss') >= 0) {
                    this.secondsArray = this.initSecondsArray('ss');
                    this.slideOptsSeconds.initialSlide = Number(this.momentObj.format('ss'));
                }
                else if (timeFormat.indexOf('s') >= 0) {
                    this.secondsArray = this.initSecondsArray('s');
                    this.slideOptsSeconds.initialSlide = Number(this.momentObj.format('s'));
                }
                // console.log('seconds array =>', this.secondsArray);
            };
        // initialize seconds array
        // initialize seconds array
        /**
         * @param {?} format
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.initSecondsArray =
            // initialize seconds array
            /**
             * @param {?} format
             * @return {?}
             */
            function (format) {
                /** @type {?} */
                var obj = moment().startOf('minute');
                /** @type {?} */
                var secondsArray = [];
                for (var i = 0; i < 60; i++) {
                    secondsArray.push(obj.format(format));
                    obj.add(1, 'seconds');
                }
                return secondsArray;
            };
        // set meridian array
        // set meridian array
        /**
         * @param {?} timeFormat
         * @return {?}
         */
        IonicTimepickerModalComponent.prototype.setMeridianArray =
            // set meridian array
            /**
             * @param {?} timeFormat
             * @return {?}
             */
            function (timeFormat) {
                if (timeFormat.indexOf('a') >= 0 || timeFormat.indexOf('A') >= 0) {
                    /** @type {?} */
                    var format = timeFormat.indexOf('a') >= 0 ? 'a' : 'A';
                    /** @type {?} */
                    var obj = moment().startOf('date');
                    this.meridianArray.push(obj.format(format));
                    this.meridianArray.push(obj.add(12, 'hours').format(format));
                }
                // console.log('meridian array =>', this.meridianArray);
                if (timeFormat.indexOf('a') >= 0) {
                    this.slideOptsMeridian.initialSlide = this.momentObj.format('a') === 'am' ? 0 : 1;
                }
                else if (timeFormat.indexOf('A') >= 0) {
                    this.slideOptsMeridian.initialSlide = this.momentObj.format('A') === 'AM' ? 0 : 1;
                }
            };
        IonicTimepickerModalComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'li-ionic-timepicker-modal',
                        template: "<ion-header>\n  <ion-toolbar>\n    <ion-title>\n      {{mainObj?.titleLabel}}\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n\n\n<ion-content scrollX=\"false\" scrollY=\"false\" >\n  <!-- <div class=\"loader\" *ngIf=\"!isReady\"></div> -->\n\n  <div class=\"tp-active\" [ngClass]=\"{'isReady': isReady}\"></div>\n\n  <ion-grid class=\"tp-slide-container\" [ngClass]=\"{'isReady': isReady}\">\n    <ion-row>\n      <ion-col>\n        <ion-slides #sliderHours pager=\"false\" [options]=\"slideOptsHours\" (ionSlideWillChange)=\"onChangeHoursSlide($event)\">\n          <ion-slide *ngFor=\"let hour of hoursArray; let i = index;\" class=\"tp-default-slide\">\n            {{ hour }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n\n      <ion-col size=\"1\" class=\"tp-colon\" *ngIf=\"minutesArray?.length > 0\">\n        <ion-label>:</ion-label>\n      </ion-col>\n      <ion-col *ngIf=\"minutesArray?.length > 0\">\n        <ion-slides #sliderMinutes pager=\"false\" [options]=\"slideOptsMinutes\" (ionSlideWillChange)=\"onChangeMinutesSlide($event)\">\n          <ion-slide *ngFor=\"let minute of minutesArray; let i = index;\" class=\"tp-default-slide\">\n            {{ minute }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n\n      <ion-col size=\"1\" class=\"tp-colon\" *ngIf=\"secondsArray?.length > 0\">\n        <ion-label>:</ion-label>\n      </ion-col>\n      <ion-col *ngIf=\"secondsArray?.length > 0\">\n        <ion-slides #sliderSeconds pager=\"false\" [options]=\"slideOptsSeconds\" (ionSlideWillChange)=\"onChangeSecondsSlide($event)\">\n          <ion-slide *ngFor=\"let second of secondsArray; let i = index ;\" class=\"tp-default-slide\">\n            {{ second }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n\n      <ion-col size=\"1\" class=\"tp-colon\" *ngIf=\"meridianArray?.length > 0\">\n        <ion-label>:</ion-label>\n      </ion-col>\n      <ion-col *ngIf=\"meridianArray?.length > 0\">\n        <ion-slides #sliderMeridian pager=\"false\" [options]=\"slideOptsMeridian\" (ionSlideWillChange)=\"onChangeMeridianSlide($event)\">\n          <ion-slide *ngFor=\"let meridian of meridianArray; let i = index ;\" class=\"tp-default-slide\">\n            {{ meridian }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n\n</ion-content>\n\n<ion-footer [ngClass]=\"{'isReady': isReady}\">\n  <ion-toolbar>\n    <ion-grid no-padding>\n      <ion-row no-padding [ngClass]=\"mainObj?.btnCloseSetInReverse ? 'dp-btn-set-close-in-reverse' : ''\">\n        <ion-col size=\"6\" no-padding>\n          <ion-button class=\"ion-button\" expand=\"{{mainObj?.btnProperties?.expand}}\" fill=\"{{mainObj?.btnProperties?.fill}}\"\n            size=\"{{mainObj?.btnProperties?.size}}\" color=\"{{mainObj?.btnProperties?.color}}\" disabled=\"{{mainObj?.btnProperties?.disabled}}\"\n            strong=\"{{mainObj?.btnProperties?.strong}}\" (click)=\"closeIonicTimePickerModal()\">\n            {{mainObj?.closeLabel}}\n          </ion-button>\n        </ion-col>\n        <ion-col size=\"6\" no-padding>\n          <ion-button class=\"ion-button\" expand=\"{{mainObj?.btnProperties?.expand}}\" fill=\"{{mainObj?.btnProperties?.fill}}\"\n            size=\"{{mainObj?.btnProperties?.size}}\" color=\"{{mainObj?.btnProperties?.color}}\" disabled=\"{{mainObj?.btnProperties?.disabled}}\"\n            strong=\"{{mainObj?.btnProperties?.strong}}\" (click)=\"setIonicTimePickerTime()\">\n            {{mainObj?.setLabel}}\n          </ion-button>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-toolbar>\n</ion-footer>",
                        styles: [":host ion-header{height:48px}:host ion-header ion-toolbar{--background:var(--ion-color-primary);height:100%;align-items:center;display:flex;color:var(--ion-color-primary-contrast)}:host ion-header ion-toolbar ion-title{font-size:20px;font-weight:700;text-align:center}@media (min-width:768px){:host ion-header ion-toolbar ion-title{font-size:22px}}:host ion-footer{height:44px}:host ion-footer ion-toolbar{--min-height:100%;--border-width:0;--padding-top:0px;--padding-bottom:0px;--padding-start:0px;--padding-end:0px}:host ion-footer ion-toolbar .dp-btn-set-close-in-reverse{flex-direction:row-reverse}:host ion-footer ion-toolbar ion-button{--border-radius:0;height:44px;margin:0}:host ion-footer ion-toolbar ion-button:focus{outline:0}:host ion-footer ion-toolbar ion-button.activated{--background-activated:var(--ion-color-primary-tint);--color-activated:white}:host .swiper-slide-active{color:var(--ion-color-primary)!important;font-size:20px!important}:host .tp-default-slide{color:#adadad;font-size:16px}:host .tp-slide-container{padding:5px!important;position:relative}:host .tp-slide-container ion-slides{height:165px}:host .tp-slide-container .tp-colon{font-style:bold;font-weight:700;margin-bottom:3px;display:flex;align-items:center;justify-content:center}:host .tp-active{position:absolute;top:76px;left:5px;width:300px;height:33px;background-color:#d3d3d3}:host .tp-active,:host .tp-slide-container,:host ion-footer{opacity:0}:host .isReady{opacity:1;transition:opacity .4s ease-in}:host .loader{border:5px solid #f3f3f3;border-radius:50%;border-top:5px solid var(--ion-color-primary);width:50px;height:50px;-webkit-animation:2s linear infinite spin;animation:2s linear infinite spin;position:absolute;top:50%;left:50%;margin:-25px 0 0 -25px}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"]
                    }] }
        ];
        /** @nocollapse */
        IonicTimepickerModalComponent.ctorParameters = function () {
            return [
                { type: angular.NavParams },
                { type: angular.ModalController }
            ];
        };
        IonicTimepickerModalComponent.propDecorators = {
            sliderHours: [{ type: i0.ViewChild, args: ['sliderHours',] }],
            sliderMinutes: [{ type: i0.ViewChild, args: ['sliderMinutes',] }],
            sliderSeconds: [{ type: i0.ViewChild, args: ['sliderSeconds',] }],
            sliderMeridian: [{ type: i0.ViewChild, args: ['sliderMeridian',] }]
        };
        return IonicTimepickerModalComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var noop = ( /**
     * @return {?}
     */function () {
    });
    /** @type {?} */
    var CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(( /**
         * @return {?}
         */function () { return IonicTimepickerComponent; })),
        multi: true,
    };
    var IonicTimepickerComponent = /** @class */ (function () {
        function IonicTimepickerComponent(modalCtrl, el, renderer) {
            this.modalCtrl = modalCtrl;
            this.el = el;
            this.renderer = renderer;
            this.innerValue = '';
            // Placeholders for the callbacks which are later provided
            // by the Control Value Accessor
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
        }
        /**
         * @return {?}
         */
        IonicTimepickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.inputTimeConfig.clearButton !== false) {
                    this.closeIcon = document.createElement('ion-icon');
                    this.closeIcon.name = 'close-circle';
                    this.closeIcon.className = 'clearButton';
                    this.closeIcon.style.position = 'absolute';
                    this.closeIcon.style.right = '8px';
                    this.closeIcon.style.bottom = '0px';
                    this.closeIcon.style.fontSize = '18px';
                    this.closeIcon.style.zIndex = '5';
                    this.closeIcon.style.color = '#A9A9A9';
                    if (!this.value) {
                        this.closeIcon.style.visibility = 'hidden';
                    }
                    if (this.el.nativeElement.parentNode.nodeName === 'ION-ITEM') {
                        this.closeIcon.style.bottom = '30%';
                    }
                    this.el.nativeElement.setAttribute('style', 'position: relative; width: 100%;');
                    this.el.nativeElement.appendChild(this.closeIcon);
                    this.renderer.listen(this.closeIcon, 'click', ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        // console.log('button clicks');
                        _this.selectedTime = '';
                        _this.value = '';
                    }));
                }
            };
        // calls when input value has been changed.
        // calls when input value has been changed.
        /**
         * @param {?} value
         * @return {?}
         */
        IonicTimepickerComponent.prototype.onChangeValue =
            // calls when input value has been changed.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                // console.log('onChangeValue =>' , value);
                if (this.inputTimeConfig.clearButton || this.inputTimeConfig.clearButton === undefined) {
                    if (!value) {
                        this.closeIcon.style.visibility = 'hidden';
                    }
                    else {
                        this.closeIcon.style.visibility = 'visible';
                    }
                }
            };
        // open time picker
        // open time picker
        /**
         * @param {?} value
         * @return {?}
         */
        IonicTimepickerComponent.prototype.openTimePicker =
            // open time picker
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return __awaiter(this, void 0, void 0, function () {
                    var myTimePickerModal;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                // console.log('open time picker modal calls');
                                if (value) {
                                    this.selectedTime = value;
                                }
                                return [4 /*yield*/, this.modalCtrl.create({
                                        component: IonicTimepickerModalComponent,
                                        cssClass: 'li-ionic-timepicker',
                                        componentProps: { 'objConfig': this.inputTimeConfig, 'selectedTime': this.selectedTime }
                                    })];
                            case 1:
                                myTimePickerModal = _a.sent();
                                return [4 /*yield*/, myTimePickerModal.present()];
                            case 2:
                                _a.sent();
                                myTimePickerModal.onDidDismiss()
                                    .then(( /**
                             * @param {?} data
                             * @return {?}
                             */function (data) {
                                    // console.log(data);
                                    if (data.data && data.data.time) {
                                        _this.selectedTime = data.data.time;
                                        _this.value = data.data.time;
                                    }
                                }));
                                return [2 /*return*/];
                        }
                    });
                });
            };
        Object.defineProperty(IonicTimepickerComponent.prototype, "value", {
            // get accessor
            get: 
            // get accessor
            /**
             * @return {?}
             */
            function () {
                return this.innerValue;
            },
            // set accessor including call the onchange callback
            set: 
            // set accessor including call the onchange callback
            /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (v !== this.innerValue) {
                    this.innerValue = v;
                    this.onChangeCallback(v);
                }
                this.onChangeValue(v);
            },
            enumerable: true,
            configurable: true
        });
        // Set touched on blur
        // Set touched on blur
        /**
         * @return {?}
         */
        IonicTimepickerComponent.prototype.onBlur =
            // Set touched on blur
            /**
             * @return {?}
             */
            function () {
                this.onTouchedCallback();
            };
        // From ControlValueAccessor interface
        // From ControlValueAccessor interface
        /**
         * @param {?} value
         * @return {?}
         */
        IonicTimepickerComponent.prototype.writeValue =
            // From ControlValueAccessor interface
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this.innerValue) {
                    this.innerValue = value;
                }
                this.onChangeValue(value);
            };
        // From ControlValueAccessor interface
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        IonicTimepickerComponent.prototype.registerOnChange =
            // From ControlValueAccessor interface
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onChangeCallback = fn;
            };
        // From ControlValueAccessor interface
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        IonicTimepickerComponent.prototype.registerOnTouched =
            // From ControlValueAccessor interface
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        IonicTimepickerComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                throw new Error('Method not implemented.');
            };
        IonicTimepickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'li-ionic-timepicker',
                        template: "<input type=\"text\" (focus)=\"$event.preventDefault()\" (click)=\"openTimePicker(value)\" readonly [(ngModel)]=\"value\" start />",
                        providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                        styles: ["input{font-size:16px;border:0;border-bottom:1px solid #ccc;width:100%;padding:8px}@media (min-width:768px){input{font-size:18px}}input.has-focus,input:focus{outline:0;box-shadow:unset}"]
                    }] }
        ];
        /** @nocollapse */
        IonicTimepickerComponent.ctorParameters = function () {
            return [
                { type: angular.ModalController },
                { type: i0.ElementRef },
                { type: i0.Renderer }
            ];
        };
        IonicTimepickerComponent.propDecorators = {
            inputTimeConfig: [{ type: i0.Input }]
        };
        return IonicTimepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LiIonicTimepickerDirective = /** @class */ (function () {
        function LiIonicTimepickerDirective(modalCtrl, ngModel, control, el, renderer) {
            this.modalCtrl = modalCtrl;
            this.ngModel = ngModel;
            this.control = control;
            this.el = el;
            this.renderer = renderer;
            this.isModalOpen = false;
        }
        /**
         * @return {?}
         */
        LiIonicTimepickerDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // console.log('this.inp', this.inputTimeConfig.clearButton);
                var _this = this;
                if (this.inputTimeConfig.clearButton !== false) {
                    this.closeIcon = document.createElement('ion-icon');
                    this.closeIcon.name = 'close-circle';
                    this.closeIcon.className = 'clearButton';
                    this.closeIcon.style.position = 'absolute';
                    this.closeIcon.style.right = '8px';
                    this.closeIcon.style.bottom = '30%';
                    this.closeIcon.style.fontSize = '18px';
                    this.closeIcon.style.zIndex = '5';
                    this.closeIcon.style.color = '#A9A9A9';
                    if (!this.ngModel.value || !this.control.control.value) {
                        this.closeIcon.style.visibility = 'hidden';
                    }
                    if (this.el.nativeElement.parentNode.nodeName === 'ION-ITEM') {
                        this.closeIcon.style.bottom = '12px';
                    }
                    this.el.nativeElement.parentNode.appendChild(this.closeIcon);
                    this.renderer.listen(this.closeIcon, 'click', ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        // console.log('button clicks');
                        _this.selectedTime = '';
                        _this.control.control.setValue('');
                        _this.ngModel.update.emit('');
                    }));
                }
                /** @type {?} */
                var self = this;
                this.ngModel.valueChanges.subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    // console.log('ngModel value =>', value);
                    self.selectedTime = value;
                    if (self.inputTimeConfig.clearButton !== false) {
                        if (!value) {
                            self.closeIcon.style.visibility = 'hidden';
                        }
                        else {
                            self.closeIcon.style.visibility = 'visible';
                        }
                    }
                }));
                this.control.control.valueChanges.subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    // console.log('formcontrol value =>', value);
                    self.selectedTime = value;
                    if (self.inputTimeConfig.clearButton !== false) {
                        if (!value) {
                            self.closeIcon.style.visibility = 'hidden';
                        }
                        else {
                            self.closeIcon.style.visibility = 'visible';
                        }
                    }
                }));
                if (this.control.control.value) {
                    this.selectedTime = this.control.control.value;
                }
                if (this.ngModel.value) {
                    this.selectedTime = this.ngModel.value;
                }
            };
        // @HostListener('click')
        // onClick() {
        //   // console.log('on click of component =>', this.inputTimeConfig);
        //   if (!this.isModalOpen) {
        //     this.isModalOpen = true;
        //     this.openTimePicker();
        //   }
        // }
        // @HostListener('click')
        // onClick() {
        //   // console.log('on click of component =>', this.inputTimeConfig);
        //   if (!this.isModalOpen) {
        //     this.isModalOpen = true;
        //     this.openTimePicker();
        //   }
        // }
        /**
         * @return {?}
         */
        LiIonicTimepickerDirective.prototype.onFocus =
            // @HostListener('click')
            // onClick() {
            //   // console.log('on click of component =>', this.inputTimeConfig);
            //   if (!this.isModalOpen) {
            //     this.isModalOpen = true;
            //     this.openTimePicker();
            //   }
            // }
            /**
             * @return {?}
             */
            function () {
                // console.log('on focus of component =>', this.inputTimeConfig);
                if (!this.isModalOpen) {
                    this.isModalOpen = true;
                    this.openTimePicker();
                }
            };
        // open time picker
        // open time picker
        /**
         * @return {?}
         */
        LiIonicTimepickerDirective.prototype.openTimePicker =
            // open time picker
            /**
             * @return {?}
             */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var myTimePickerModal;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                // console.log('open time picker modal calls');
                                return [4 /*yield*/, this.modalCtrl.create({
                                        component: IonicTimepickerModalComponent,
                                        cssClass: 'li-ionic-timepicker',
                                        componentProps: { 'objConfig': this.inputTimeConfig, 'selectedTime': this.selectedTime }
                                    })];
                            case 1:
                                myTimePickerModal = _a.sent();
                                return [4 /*yield*/, myTimePickerModal.present()];
                            case 2:
                                _a.sent();
                                myTimePickerModal.onDidDismiss()
                                    .then(( /**
                             * @param {?} data
                             * @return {?}
                             */function (data) {
                                    _this.isModalOpen = false;
                                    // console.log(data);
                                    if (data.data && data.data.time) {
                                        _this.selectedTime = data.data.time;
                                        _this.control.control.setValue(_this.selectedTime);
                                        _this.ngModel.update.emit(_this.selectedTime);
                                    }
                                }));
                                return [2 /*return*/];
                        }
                    });
                });
            };
        LiIonicTimepickerDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[liIonicTimepicker]',
                        exportAs: 'liIonicTimepicker',
                        providers: [forms.NgModel]
                    },] }
        ];
        /** @nocollapse */
        LiIonicTimepickerDirective.ctorParameters = function () {
            return [
                { type: angular.ModalController },
                { type: forms.NgModel },
                { type: forms.NgControl },
                { type: i0.ElementRef },
                { type: i0.Renderer }
            ];
        };
        LiIonicTimepickerDirective.propDecorators = {
            inputTimeConfig: [{ type: i0.Input, args: ['liIonicTimepicker',] }],
            onFocus: [{ type: i0.HostListener, args: ['ionFocus',] }]
        };
        return LiIonicTimepickerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IonicTimepickerModule = /** @class */ (function () {
        function IonicTimepickerModule() {
        }
        IonicTimepickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            angular.IonicModule
                        ],
                        entryComponents: [
                            // IonicTimepickerComponent,
                            IonicTimepickerModalComponent
                        ],
                        declarations: [
                            IonicTimepickerComponent,
                            IonicTimepickerModalComponent,
                            LiIonicTimepickerDirective
                        ],
                        exports: [
                            forms.FormsModule,
                            common.CommonModule,
                            IonicTimepickerComponent,
                            LiIonicTimepickerDirective,
                            IonicTimepickerModalComponent
                        ]
                    },] }
        ];
        return IonicTimepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.IonicTimepickerService = IonicTimepickerService;
    exports.CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR;
    exports.IonicTimepickerComponent = IonicTimepickerComponent;
    exports.IonicTimepickerModule = IonicTimepickerModule;
    exports.IonicTimepickerModalComponent = IonicTimepickerModalComponent;
    exports.ɵa = LiIonicTimepickerDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=logisticinfotech-ionic-timepicker.umd.js.map