/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { NavParams, ModalController, IonSlides } from '@ionic/angular';
import { Observable } from 'rxjs';
import * as moment_ from 'moment';
// const memo = memo_.Resolver;
/** @type {?} */
const moment = moment_;
export class IonicTimepickerModalComponent {
    /**
     * @param {?} navParams
     * @param {?} modalCtrl
     */
    constructor(navParams, modalCtrl) {
        this.navParams = navParams;
        this.modalCtrl = modalCtrl;
        this.hoursArray = [];
        this.minutesArray = [];
        this.secondsArray = [];
        this.meridianArray = [];
        this.slideOptsHours = {
            centeredSlides: true,
            slidesPerView: 5,
            initialSlide: 0,
            direction: 'vertical',
            loop: true
        };
        this.slideOptsMinutes = {
            centeredSlides: true,
            slidesPerView: 5,
            initialSlide: 0,
            direction: 'vertical',
            loop: true
        };
        this.slideOptsSeconds = {
            centeredSlides: true,
            slidesPerView: 5,
            initialSlide: 0,
            direction: 'vertical',
            loop: true
        };
        this.slideOptsMeridian = {
            centeredSlides: true,
            slidesPerView: 5,
            initialSlide: 0,
            direction: 'vertical',
            loop: false
        };
        this.sliderHoursActiveIndex = 0;
        this.sliderMinutesActiveIndex = 0;
        this.sliderSecondsActiveIndex = 0;
        this.sliderMeridianActiveIndex = 0;
        this.mainObj = {};
        this.isReady = false;
        this.inItTimePicker().subscribe();
    }
    /**
     * @return {?}
     */
    ionViewDidEnter() {
        // this.inItTimePicker().subscribe();
        // this.inItTimePicker();
    }
    /**
     * @return {?}
     */
    inItTimePicker() {
        /** @type {?} */
        const myObservable = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            if (this.navParams.get('selectedTime')) {
                console.log('Selected time =>', this.navParams.get('selectedTime'));
                this.selectedTime = this.navParams.get('selectedTime');
            }
            this.mainObj = this.initTimePickerObject(this.navParams.get('objConfig'));
            this.setHoursArray(this.mainObj.timeFormat);
            this.setMinutesArray(this.mainObj.timeFormat);
            this.setSecondsArray(this.mainObj.timeFormat);
            this.setMeridianArray(this.mainObj.timeFormat);
            // setTimeout(() => {
            this.isReady = true;
            // }, 100);
            observer.complete();
        }));
        return myObservable;
    }
    // get slider hours active index
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeHoursSlide(event) {
        this.sliderHoursActiveIndex = event.target.swiper.realIndex;
    }
    // get slider minutes active index
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeMinutesSlide(event) {
        this.sliderMinutesActiveIndex = event.target.swiper.realIndex;
    }
    // get slider seconds active index
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeSecondsSlide(event) {
        this.sliderSecondsActiveIndex = event.target.swiper.realIndex;
    }
    // get slider seconds active index
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeMeridianSlide(event) {
        this.sliderMeridianActiveIndex = event.target.swiper.realIndex;
    }
    // initialize timepicker Object
    /**
     * @param {?} config
     * @return {?}
     */
    initTimePickerObject(config) {
        if (config.inputTime && !this.selectedTime) {
            this.selectedTime = config.inputTime;
        }
        /** @type {?} */
        const objConfig = {};
        objConfig.momentLocale = config.momentLocale ? config.momentLocale : 'en-US';
        moment.locale(objConfig.momentLocale);
        objConfig.timeFormat = config.timeFormat ? config.timeFormat : 'hh:mm A';
        if (typeof (this.selectedTime) === 'string') {
            this.momentObj = this.selectedTime ?
                moment(this.selectedTime, objConfig.timeFormat) :
                moment(moment(new Date().getTime()));
        }
        else {
            this.momentObj = this.selectedTime ?
                moment(this.selectedTime) :
                moment(moment(new Date().getTime()));
        }
        objConfig.setLabel = config.setLabel ? config.setLabel : 'Set';
        objConfig.closeLabel = config.closeLabel ? config.closeLabel : 'Close';
        objConfig.titleLabel = config.titleLabel ? config.titleLabel : 'Time';
        objConfig.btnCloseSetInReverse = config.btnCloseSetInReverse ? config.btnCloseSetInReverse : false;
        objConfig.btnProperties = {};
        if (config.btnProperties) {
            /** @type {?} */
            const btnProperties = config.btnProperties;
            objConfig.btnProperties.expand = btnProperties.expand ? btnProperties.expand : 'block';
            objConfig.btnProperties.fill = btnProperties.fill ? btnProperties.fill : 'solid';
            objConfig.btnProperties.size = btnProperties.size ? btnProperties.size : 'default';
            objConfig.btnProperties.color = btnProperties.color ? btnProperties.color : '';
            objConfig.btnProperties.disabled = btnProperties.disabled ? btnProperties.disabled : false;
            objConfig.btnProperties.strong = btnProperties.strong ? btnProperties.strong : false;
        }
        else {
            objConfig.btnProperties.expand = 'block';
            objConfig.btnProperties.fill = 'solid';
            objConfig.btnProperties.size = 'default';
            objConfig.btnProperties.disabled = false;
            objConfig.btnProperties.strong = false;
        }
        return objConfig;
    }
    // close modal
    /**
     * @return {?}
     */
    closeIonicTimePickerModal() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const modal = yield this.modalCtrl.getTop();
            modal.dismiss('');
        });
    }
    // set time in modal dismiss method
    /**
     * @return {?}
     */
    setIonicTimePickerTime() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const modal = yield this.modalCtrl.getTop();
            this.selectedTime = this.setTimeInMomentObject();
            modal.dismiss({ time: (this.selectedTime) });
        });
    }
    // set time in moment object
    /**
     * @return {?}
     */
    setTimeInMomentObject() {
        /** @type {?} */
        const formateArray = [];
        /** @type {?} */
        const timeArray = [];
        /** @type {?} */
        const charZeroInLocale = moment().second(0).format('s');
        // console.log('charZeroInLocale : ' + charZeroInLocale);
        if (this.mainObj.timeFormat.indexOf('H') >= 0) {
            formateArray.push('H');
            /** @type {?} */
            let hourString = this.hoursArray[this.sliderHoursActiveIndex];
            // hourString = hourString.replace(/^0+/, '');
            timeArray.push(hourString);
        }
        if (this.mainObj.timeFormat.indexOf('h') >= 0) {
            formateArray.push('h');
            /** @type {?} */
            let hourString = this.hoursArray[this.sliderHoursActiveIndex];
            // hourString = hourString.replace(/^0+/, '');
            timeArray.push(hourString);
        }
        if (this.mainObj.timeFormat.indexOf('k') >= 0) {
            formateArray.push('k');
            /** @type {?} */
            let hourString = this.hoursArray[this.sliderHoursActiveIndex];
            // hourString = hourString.replace(/^0+/, '');
            timeArray.push(hourString);
        }
        if (this.mainObj.timeFormat.indexOf('m') >= 0) {
            formateArray.push('m');
            /** @type {?} */
            let minString = this.minutesArray[this.sliderMinutesActiveIndex];
            // minString = minString.replace(/^0+/, '');
            timeArray.push(minString);
        }
        if (this.mainObj.timeFormat.indexOf('s') >= 0) {
            formateArray.push('s');
            /** @type {?} */
            let secString = this.secondsArray[this.sliderSecondsActiveIndex];
            // secString = secString.replace(/^0+/, '');
            timeArray.push(secString);
        }
        if (this.mainObj.timeFormat.indexOf('a') >= 0 || this.mainObj.timeFormat.indexOf('A') >= 0) {
            formateArray.push('a');
            /** @type {?} */
            let meridianString = this.meridianArray[this.sliderMeridianActiveIndex].toLowerCase();
            timeArray.push(meridianString);
        }
        /** @type {?} */
        const formateString = formateArray.join(':');
        /** @type {?} */
        const timeString = timeArray.join(':');
        // this.momentObj = mmObj;
        // console.log('timeString: ' + timeString + '  formateString: ' + formateString);
        /** @type {?} */
        const mmObj = moment(timeString, formateString);
        return mmObj.format(this.mainObj.timeFormat);
    }
    // sets hours array
    /**
     * @param {?} timeFormat
     * @return {?}
     */
    setHoursArray(timeFormat) {
        /** @type {?} */
        const obj = moment().startOf('date');
        if (timeFormat.indexOf('HH') >= 0) {
            this.hoursArray = this.initHoursArray(obj, 23, 'HH');
            this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('HH');
        }
        else if (timeFormat.indexOf('H') >= 0) {
            this.hoursArray = this.initHoursArray(obj, 23, 'H');
            this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('H');
        }
        else if (timeFormat.indexOf('hh') >= 0) {
            this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 11, 'hh');
            this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('hh') - 1;
        }
        else if (timeFormat.indexOf('h') >= 0) {
            this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 11, 'h');
            this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('h') - 1;
        }
        else if (timeFormat.indexOf('kk') >= 0) {
            this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 23, 'kk');
            this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('kk') - 1;
        }
        else if (timeFormat.indexOf('k') >= 0) {
            this.hoursArray = this.initHoursArray(obj.add(1, 'hours'), 23, 'k');
            this.slideOptsHours.initialSlide = this.momentObj.locale('en').format('k') - 1;
        }
        // console.log('hours array =>', this.hoursArray);
    }
    // Initialize hours array
    /**
     * @param {?} momentObj
     * @param {?} end
     * @param {?} format
     * @return {?}
     */
    initHoursArray(momentObj, end, format) {
        /** @type {?} */
        const hoursArray = [];
        for (let i = 0; i <= end; i++) {
            hoursArray.push(momentObj.format(format));
            momentObj.add(1, 'hours');
        }
        return hoursArray;
    }
    // sets minutes array
    /**
     * @param {?} timeFormat
     * @return {?}
     */
    setMinutesArray(timeFormat) {
        if (timeFormat.indexOf('mm') >= 0) {
            this.minutesArray = this.initMinutesArray('mm');
            this.slideOptsMinutes.initialSlide = Number(this.momentObj.format('mm'));
        }
        else if (timeFormat.indexOf('m') >= 0) {
            this.minutesArray = this.initMinutesArray('m');
            this.slideOptsMinutes.initialSlide = Number(this.momentObj.format('m'));
        }
        // console.log('minutes array =>', this.minutesArray);
    }
    // initialize minutes array
    /**
     * @param {?} format
     * @return {?}
     */
    initMinutesArray(format) {
        /** @type {?} */
        const obj = moment().startOf('hour');
        /** @type {?} */
        const minutesArray = [];
        for (let i = 0; i < 60; i++) {
            minutesArray.push(obj.format(format));
            obj.add(1, 'minutes');
        }
        return minutesArray;
    }
    // sets seconds array
    /**
     * @param {?} timeFormat
     * @return {?}
     */
    setSecondsArray(timeFormat) {
        if (timeFormat.indexOf('ss') >= 0) {
            this.secondsArray = this.initSecondsArray('ss');
            this.slideOptsSeconds.initialSlide = Number(this.momentObj.format('ss'));
        }
        else if (timeFormat.indexOf('s') >= 0) {
            this.secondsArray = this.initSecondsArray('s');
            this.slideOptsSeconds.initialSlide = Number(this.momentObj.format('s'));
        }
        // console.log('seconds array =>', this.secondsArray);
    }
    // initialize seconds array
    /**
     * @param {?} format
     * @return {?}
     */
    initSecondsArray(format) {
        /** @type {?} */
        const obj = moment().startOf('minute');
        /** @type {?} */
        const secondsArray = [];
        for (let i = 0; i < 60; i++) {
            secondsArray.push(obj.format(format));
            obj.add(1, 'seconds');
        }
        return secondsArray;
    }
    // set meridian array
    /**
     * @param {?} timeFormat
     * @return {?}
     */
    setMeridianArray(timeFormat) {
        if (timeFormat.indexOf('a') >= 0 || timeFormat.indexOf('A') >= 0) {
            /** @type {?} */
            const format = timeFormat.indexOf('a') >= 0 ? 'a' : 'A';
            /** @type {?} */
            const obj = moment().startOf('date');
            this.meridianArray.push(obj.format(format));
            this.meridianArray.push(obj.add(12, 'hours').format(format));
        }
        // console.log('meridian array =>', this.meridianArray);
        if (timeFormat.indexOf('a') >= 0) {
            this.slideOptsMeridian.initialSlide = this.momentObj.format('a') === 'am' ? 0 : 1;
        }
        else if (timeFormat.indexOf('A') >= 0) {
            this.slideOptsMeridian.initialSlide = this.momentObj.format('A') === 'AM' ? 0 : 1;
        }
    }
}
IonicTimepickerModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'li-ionic-timepicker-modal',
                template: "<ion-header>\n  <ion-toolbar>\n    <ion-title>\n      {{mainObj?.titleLabel}}\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n\n\n<ion-content scrollX=\"false\" scrollY=\"false\" >\n  <!-- <div class=\"loader\" *ngIf=\"!isReady\"></div> -->\n\n  <div class=\"tp-active\" [ngClass]=\"{'isReady': isReady}\"></div>\n\n  <ion-grid class=\"tp-slide-container\" [ngClass]=\"{'isReady': isReady}\">\n    <ion-row>\n      <ion-col>\n        <ion-slides #sliderHours pager=\"false\" [options]=\"slideOptsHours\" (ionSlideWillChange)=\"onChangeHoursSlide($event)\">\n          <ion-slide *ngFor=\"let hour of hoursArray; let i = index;\" class=\"tp-default-slide\">\n            {{ hour }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n\n      <ion-col size=\"1\" class=\"tp-colon\" *ngIf=\"minutesArray?.length > 0\">\n        <ion-label>:</ion-label>\n      </ion-col>\n      <ion-col *ngIf=\"minutesArray?.length > 0\">\n        <ion-slides #sliderMinutes pager=\"false\" [options]=\"slideOptsMinutes\" (ionSlideWillChange)=\"onChangeMinutesSlide($event)\">\n          <ion-slide *ngFor=\"let minute of minutesArray; let i = index;\" class=\"tp-default-slide\">\n            {{ minute }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n\n      <ion-col size=\"1\" class=\"tp-colon\" *ngIf=\"secondsArray?.length > 0\">\n        <ion-label>:</ion-label>\n      </ion-col>\n      <ion-col *ngIf=\"secondsArray?.length > 0\">\n        <ion-slides #sliderSeconds pager=\"false\" [options]=\"slideOptsSeconds\" (ionSlideWillChange)=\"onChangeSecondsSlide($event)\">\n          <ion-slide *ngFor=\"let second of secondsArray; let i = index ;\" class=\"tp-default-slide\">\n            {{ second }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n\n      <ion-col size=\"1\" class=\"tp-colon\" *ngIf=\"meridianArray?.length > 0\">\n        <ion-label>:</ion-label>\n      </ion-col>\n      <ion-col *ngIf=\"meridianArray?.length > 0\">\n        <ion-slides #sliderMeridian pager=\"false\" [options]=\"slideOptsMeridian\" (ionSlideWillChange)=\"onChangeMeridianSlide($event)\">\n          <ion-slide *ngFor=\"let meridian of meridianArray; let i = index ;\" class=\"tp-default-slide\">\n            {{ meridian }}\n          </ion-slide>\n        </ion-slides>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n\n</ion-content>\n\n<ion-footer [ngClass]=\"{'isReady': isReady}\">\n  <ion-toolbar>\n    <ion-grid no-padding>\n      <ion-row no-padding [ngClass]=\"mainObj?.btnCloseSetInReverse ? 'dp-btn-set-close-in-reverse' : ''\">\n        <ion-col size=\"6\" no-padding>\n          <ion-button class=\"ion-button\" expand=\"{{mainObj?.btnProperties?.expand}}\" fill=\"{{mainObj?.btnProperties?.fill}}\"\n            size=\"{{mainObj?.btnProperties?.size}}\" color=\"{{mainObj?.btnProperties?.color}}\" disabled=\"{{mainObj?.btnProperties?.disabled}}\"\n            strong=\"{{mainObj?.btnProperties?.strong}}\" (click)=\"closeIonicTimePickerModal()\">\n            {{mainObj?.closeLabel}}\n          </ion-button>\n        </ion-col>\n        <ion-col size=\"6\" no-padding>\n          <ion-button class=\"ion-button\" expand=\"{{mainObj?.btnProperties?.expand}}\" fill=\"{{mainObj?.btnProperties?.fill}}\"\n            size=\"{{mainObj?.btnProperties?.size}}\" color=\"{{mainObj?.btnProperties?.color}}\" disabled=\"{{mainObj?.btnProperties?.disabled}}\"\n            strong=\"{{mainObj?.btnProperties?.strong}}\" (click)=\"setIonicTimePickerTime()\">\n            {{mainObj?.setLabel}}\n          </ion-button>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-toolbar>\n</ion-footer>",
                styles: [":host ion-header{height:48px}:host ion-header ion-toolbar{--background:var(--ion-color-primary);height:100%;align-items:center;display:flex;color:var(--ion-color-primary-contrast)}:host ion-header ion-toolbar ion-title{font-size:20px;font-weight:700;text-align:center}@media (min-width:768px){:host ion-header ion-toolbar ion-title{font-size:22px}}:host ion-footer{height:44px}:host ion-footer ion-toolbar{--min-height:100%;--border-width:0;--padding-top:0px;--padding-bottom:0px;--padding-start:0px;--padding-end:0px}:host ion-footer ion-toolbar .dp-btn-set-close-in-reverse{flex-direction:row-reverse}:host ion-footer ion-toolbar ion-button{--border-radius:0;height:44px;margin:0}:host ion-footer ion-toolbar ion-button:focus{outline:0}:host ion-footer ion-toolbar ion-button.activated{--background-activated:var(--ion-color-primary-tint);--color-activated:white}:host .swiper-slide-active{color:var(--ion-color-primary)!important;font-size:20px!important}:host .tp-default-slide{color:#adadad;font-size:16px}:host .tp-slide-container{padding:5px!important;position:relative}:host .tp-slide-container ion-slides{height:165px}:host .tp-slide-container .tp-colon{font-style:bold;font-weight:700;margin-bottom:3px;display:flex;align-items:center;justify-content:center}:host .tp-active{position:absolute;top:76px;left:5px;width:300px;height:33px;background-color:#d3d3d3}:host .tp-active,:host .tp-slide-container,:host ion-footer{opacity:0}:host .isReady{opacity:1;transition:opacity .4s ease-in}:host .loader{border:5px solid #f3f3f3;border-radius:50%;border-top:5px solid var(--ion-color-primary);width:50px;height:50px;-webkit-animation:2s linear infinite spin;animation:2s linear infinite spin;position:absolute;top:50%;left:50%;margin:-25px 0 0 -25px}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"]
            }] }
];
/** @nocollapse */
IonicTimepickerModalComponent.ctorParameters = () => [
    { type: NavParams },
    { type: ModalController }
];
IonicTimepickerModalComponent.propDecorators = {
    sliderHours: [{ type: ViewChild, args: ['sliderHours',] }],
    sliderMinutes: [{ type: ViewChild, args: ['sliderMinutes',] }],
    sliderSeconds: [{ type: ViewChild, args: ['sliderSeconds',] }],
    sliderMeridian: [{ type: ViewChild, args: ['sliderMeridian',] }]
};
if (false) {
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderHours;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderMinutes;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderSeconds;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderMeridian;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.hoursArray;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.minutesArray;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.secondsArray;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.meridianArray;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.slideOptsHours;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.slideOptsMinutes;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.slideOptsSeconds;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.slideOptsMeridian;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderHoursActiveIndex;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderMinutesActiveIndex;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderSecondsActiveIndex;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.sliderMeridianActiveIndex;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.momentObj;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.mainObj;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.selectedTime;
    /** @type {?} */
    IonicTimepickerModalComponent.prototype.isReady;
    /**
     * @type {?}
     * @private
     */
    IonicTimepickerModalComponent.prototype.navParams;
    /**
     * @type {?}
     * @private
     */
    IonicTimepickerModalComponent.prototype.modalCtrl;
}
//# sourceMappingURL=data:application/json;base64,