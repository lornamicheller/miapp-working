/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, HostListener, ElementRef, Renderer, Input } from '@angular/core';
import { IonicTimepickerModalComponent } from './ionic-timepicker-modal/ionic-timepicker-modal.component';
import { ModalController } from '@ionic/angular';
import { NgModel, NgControl } from '@angular/forms';
export class LiIonicTimepickerDirective {
    /**
     * @param {?} modalCtrl
     * @param {?} ngModel
     * @param {?} control
     * @param {?} el
     * @param {?} renderer
     */
    constructor(modalCtrl, ngModel, control, el, renderer) {
        this.modalCtrl = modalCtrl;
        this.ngModel = ngModel;
        this.control = control;
        this.el = el;
        this.renderer = renderer;
        this.isModalOpen = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // console.log('this.inp', this.inputTimeConfig.clearButton);
        if (this.inputTimeConfig.clearButton !== false) {
            this.closeIcon = document.createElement('ion-icon');
            this.closeIcon.name = 'close-circle';
            this.closeIcon.className = 'clearButton';
            this.closeIcon.style.position = 'absolute';
            this.closeIcon.style.right = '8px';
            this.closeIcon.style.bottom = '30%';
            this.closeIcon.style.fontSize = '18px';
            this.closeIcon.style.zIndex = '5';
            this.closeIcon.style.color = '#A9A9A9';
            if (!this.ngModel.value || !this.control.control.value) {
                this.closeIcon.style.visibility = 'hidden';
            }
            if (this.el.nativeElement.parentNode.nodeName === 'ION-ITEM') {
                this.closeIcon.style.bottom = '12px';
            }
            this.el.nativeElement.parentNode.appendChild(this.closeIcon);
            this.renderer.listen(this.closeIcon, 'click', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                // console.log('button clicks');
                this.selectedTime = '';
                this.control.control.setValue('');
                this.ngModel.update.emit('');
            }));
        }
        /** @type {?} */
        const self = this;
        this.ngModel.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            // console.log('ngModel value =>', value);
            self.selectedTime = value;
            if (self.inputTimeConfig.clearButton !== false) {
                if (!value) {
                    self.closeIcon.style.visibility = 'hidden';
                }
                else {
                    self.closeIcon.style.visibility = 'visible';
                }
            }
        }));
        this.control.control.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            // console.log('formcontrol value =>', value);
            self.selectedTime = value;
            if (self.inputTimeConfig.clearButton !== false) {
                if (!value) {
                    self.closeIcon.style.visibility = 'hidden';
                }
                else {
                    self.closeIcon.style.visibility = 'visible';
                }
            }
        }));
        if (this.control.control.value) {
            this.selectedTime = this.control.control.value;
        }
        if (this.ngModel.value) {
            this.selectedTime = this.ngModel.value;
        }
    }
    // @HostListener('click')
    // onClick() {
    //   // console.log('on click of component =>', this.inputTimeConfig);
    //   if (!this.isModalOpen) {
    //     this.isModalOpen = true;
    //     this.openTimePicker();
    //   }
    // }
    /**
     * @return {?}
     */
    onFocus() {
        // console.log('on focus of component =>', this.inputTimeConfig);
        if (!this.isModalOpen) {
            this.isModalOpen = true;
            this.openTimePicker();
        }
    }
    // open time picker
    /**
     * @return {?}
     */
    openTimePicker() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // console.log('open time picker modal calls');
            /** @type {?} */
            const myTimePickerModal = yield this.modalCtrl.create({
                component: IonicTimepickerModalComponent,
                cssClass: 'li-ionic-timepicker',
                componentProps: { 'objConfig': this.inputTimeConfig, 'selectedTime': this.selectedTime }
            });
            yield myTimePickerModal.present();
            myTimePickerModal.onDidDismiss()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this.isModalOpen = false;
                // console.log(data);
                if (data.data && data.data.time) {
                    this.selectedTime = data.data.time;
                    this.control.control.setValue(this.selectedTime);
                    this.ngModel.update.emit(this.selectedTime);
                }
            }));
        });
    }
}
LiIonicTimepickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[liIonicTimepicker]',
                exportAs: 'liIonicTimepicker',
                providers: [NgModel]
            },] }
];
/** @nocollapse */
LiIonicTimepickerDirective.ctorParameters = () => [
    { type: ModalController },
    { type: NgModel },
    { type: NgControl },
    { type: ElementRef },
    { type: Renderer }
];
LiIonicTimepickerDirective.propDecorators = {
    inputTimeConfig: [{ type: Input, args: ['liIonicTimepicker',] }],
    onFocus: [{ type: HostListener, args: ['ionFocus',] }]
};
if (false) {
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.inputTimeConfig;
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.isModalOpen;
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.closeIcon;
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.selectedTime;
    /**
     * @type {?}
     * @private
     */
    LiIonicTimepickerDirective.prototype.modalCtrl;
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.ngModel;
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.control;
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.el;
    /** @type {?} */
    LiIonicTimepickerDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,